panel.grid.minor = element_blank(), #次网格线
panel.border = element_blank(), #边框
axis.title = element_blank(),  #轴标题
panel.background = element_rect(fill = 'white'), #背景色
plot.background=element_rect(fill="white"))+
coord_flip()
}
return(p)
}
##########################################vizUMAP
# -------------- *** vizUMAP() **** ---------------
#' UMAP plot
#'
#' Graphs the output of a dimensional reduction technique on a 2D scatter plot where each point is a cell and it's positioned based on the cell embeddings determined by the reduction technique.
#' By default, cells are colored by their celltype (can be changed with the group.by parameter)
#'
#' @usage vizUMAP(PAdata,celltype.anno=NULL,group.by,PA = NULL,gene=NULL,dims=1:10,order=NULL,cols=NULL,order.cols=NULL,pt.cols= c("lightgrey", "#185827"),size=NULL)
#' @param PAdata A dataset of the PACdataset class(eg:scPACds) or APA index(uses all samples to filter APA sites, and then gets index for each sample):should be a data frame
#' @param celltype.anno A data frame denoting the cell classification information. Each row is one cell, and the column is the sample group
#' Row names in the celltype.anno need to match the column names of the PACdataset@counts or APA index.
#' when PAdata=PACdataset and colDataFile is provided(the information is stored in the colData at this time), celltype.anno=NULL
#' @param group.by Factor to group the cells by(the column name containing cell classification information, stored in PACdataset@colData or celltype.anno)
#' @param PA Select the poly(A) site to show it's expression in UMAP Plot
#' @param gene Select the APA gene to show the usage of PACs in UMAP Plot
#' @param dims Dimensions to plot, must be a two-length numeric vector specifying x- and y-dimensions
#' @param order Select the cell types that highlight in UMAP Plot
#' @param cols Vector of colors, each color corresponds to an identity class
#' @param order.cols The colors of the cell types that highlight(if order is not NULL)
#' @param pt.cols When PA or gene is not NULL ,the color of the point in UMAP Plot:the two colors to form the gradient over
#' @param size Adjust point size for plotting
#' @return vizUMAP() reutrns UMAP plot
#' @examples
#' vizUMAP(scPACds,group.by = "celltype",dims=1:5)
#' #Select the cell types that highlight in UMAP Plot
#' vizUMAP(scPACds,group.by = "celltype",dims=1:5,order=c("ES","RS"))
#' #Select the poly(A) site to show it's expression in UMAP Plot
#' vizUMAP(scPACds,group.by = "celltype",dims=1:5,PA="PA3346")
#' @name vizUMAP
#' @export
vizUMAP<-function(PAdata,celltype.anno=NULL,group.by,PA = NULL,gene=NULL,dims=1:10,order=NULL,cols=NULL,order.cols=NULL,pt.cols= c("lightgrey", "#185827"),size=NULL){
palette.2 <- c("#7fb80e", "#1d953f",
"#2a5caa", "#a565ef",
"#FFA500", "#F08080",
"#5F9EA0", "#f9e264", "#009db2", "#375830",
"#FFE4B5","#d71345","#FF6347",
"#EE82EE","#a9ddd4","#9ec3db","#ad91cb","#7b52ae","#6b86ff")
if(!is.null(celltype.anno)){
Seurat<-CreateSeuratObject(PAdata,meta.data = celltype.anno,assay = "PA")
}else{
Seurat<-CreateSeuratObject(PAdata@counts,meta.data =PAdata@colData,assay = "PA")
}
####标准化
Seurat <- NormalizeData(Seurat, normalization.method = "LogNormalize", scale.factor = 10000,verbose = FALSE)
Seurat<-FindVariableFeatures(Seurat,selection.method = "vst",nfeatures=100,verbose = FALSE)
####选择所有PA/gene进行归一化
allPAs <- rownames(Seurat)
umap<- ScaleData(Seurat, features = allPAs,verbose = FALSE)
#######先PCA在UMAP,不能直接UMAP
umap <- RunPCA(umap, features = allPAs)
umap<-RunUMAP(object = umap,dims = dims)
p<-DimPlot(umap,reduction ="umap" ,group.by=group.by,label=TRUE,cols= palette.2,pt.size = size)+
theme_bw()+
theme( panel.grid.major = element_blank(),#去掉主网格线
panel.grid.minor = element_blank(),#去掉次网格线
axis.text = element_blank(),#去掉坐标轴上数字
axis.ticks = element_blank(),#去掉坐标轴刻度
plot.title = element_blank())#去掉标题
if(!is.null(cols)){
p<-DimPlot(umap,reduction ="umap" ,group.by=group.by,label=TRUE,cols= cols,pt.size = size)+
theme_bw()+
theme( panel.grid.major = element_blank(),#去掉主网格线
panel.grid.minor = element_blank(),#去掉次网格线
axis.text = element_blank(),#去掉坐标轴上数字
axis.ticks = element_blank(),#去掉坐标轴刻度
plot.title = element_blank())#去掉标题
}
if(!is.null(order)){
p<-DimPlotOrder(umap,reduction="umap",group.by = group.by,order=order,palette=palette.2,size = size)+
theme_bw()+
theme( panel.grid.major = element_blank(),#去掉主网格线
panel.grid.minor = element_blank(),#去掉次网格线
axis.text = element_blank(),#去掉坐标轴上数字
axis.ticks = element_blank(),#去掉坐标轴刻度
plot.title = element_blank())#去掉标题
if(!is.null(order.cols)){
p<- DimPlotOrder(umap,reduction="umap",group.by = group.by,order=order,palette=order.cols,size = size)+
theme_bw()+
theme( panel.grid.major = element_blank(),#去掉主网格线
panel.grid.minor = element_blank(),#去掉次网格线
axis.text = element_blank(),#去掉坐标轴上数字
axis.ticks = element_blank(),#去掉坐标轴刻度
plot.title = element_blank())#去掉标题
}
}
if(!is.null(PA)){
p<- FeaturePlot(umap,features=PA,reduction="umap",cols = pt.cols,pt.size = size)+
theme_bw()+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5)
)
}
if(!is.null(gene)){
p<- FeaturePlot(umap,features=gene,reduction="umap",cols = pt.cols,pt.size = size)+
theme_bw()+
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5)
)
}
return(p)
}
##################
DimPlotOrder <- function(object,reduction,group.by,order=NULL,palette=NULL,size=NULL){
groups <- object@meta.data[,group.by]
if(!is.null(order)){
object@meta.data[,group.by] <- factor(groups, levels = order[sort(match(unique(groups),order))])
}
if(!is.null(palette)){
color <- palette[sort(match(unique(groups),order))]
figure <- DimPlot(object, reduction = reduction, group.by = group.by, cols = color,pt.size=size)
}else{
figure <- DimPlot(object, reduction = reduction, group.by = group.by,pt.size=size)
}
return(figure)
}
#####################subsetAPAMarkers
# -------------- *** subsetAPAMarkers() **** ---------------
#' APA markers of individual cell types
#'
#' Finds APA markers among different cell type
#'
#' @usage subsetAPAMarkers(APAindex,celltype.anno=NULL,group.by,cluster.1=NULL,cluster.2=NULL,every.cluster=FALSE,genes=NULL,only.pos=FALSE,method= "wilcox",order="down")
#' @param APAindex A data frame with rownames denoting genes, columns are samples, and values are the APA index values. Also includes other method-specific columns
#' @param celltype.anno A data frame denoting the cell classification information. Each row is one cell, and the column is the sample group
#' Row names in the celltype.anno need to match the column names of  APA index.
#' @param group.by Factor to group the cells by(the column name containing cell classification information, stored in celltype.anno)
#' @param cluster.1 Vector of cell names belonging to group 1
#' @param cluster.2 Vector of cell names belonging to group 2
#' @param every.cluster Finds APA markers for all cell types.When every.cluster=TRUE,cluster.1 and cluster.2 must be NULL
#' @param genes APA genes to test. Default is to use all APA genes
#' @param only.pos Only return positive markers (FALSE by default)
#' @param method Denotes which test to use. Available options are:
#' "wilcox" : Identifies differentially expressed APA genes between two groups of cells using a Wilcoxon Rank Sum test (default)
#' "t" : Identify differentially expressed APA genes between two groups of cells using the Student's t-test.
#' "LR" : Uses a logistic regression framework to determine differentially expressed APA genes.
#'  Constructs a logistic regression model predicting group membership based on each feature individually and compares this to a null model with a likelihood ratio test.
#' @param order When order=down,the returned values are sorted in descending order by avg_log2FC(The most significant marker in each group comes first);
#' When order=up,the returned values are sorted in ascending order by avg_log2FC(The most significant marker in each group ranks last)
#' @return subsetAPAMarkers() reutrns a data frame containing APA markers information
#' @examples
#' #find all markers of ES
#' PAmakers.1<- subsetAPAMarkers(APAindex,celltype.anno=scPACds@colData ,group.by="celltype",cluster.1 = "ES", only.pos=FALSE,method= "wilcox")
#' #find all markers distinguishing ES from RS
#' PAmakers.2<- subsetAPAMarkers(APAindex,celltype.anno=scPACds@colData ,group.by="celltype",cluster.1 = "ES", cluster.2="RS",only.pos=FALSE,method= "wilcox")
#' #find markers for every cell cluster compared to all remaining cell clusters, report only the positive ones
#' APAmarkers<- subsetAPAMarkers(APAindex,celltype.anno=scPACds@colData ,group.by="celltype",every.cluster = TRUE, only.pos=TRUE,method= "wilcox")
#' @name subsetAPAMarkers
#' @export
subsetAPAMarkers<-function(APAindex,celltype.anno=NULL,group.by,cluster.1=NULL,cluster.2=NULL,every.cluster=FALSE,
genes=NULL,only.pos=FALSE,method= "wilcox",order="down"){
Seurat<-CreateSeuratObject(APAindex,meta.data =celltype.anno,assay = "APA")
####标准化
Seurat <- NormalizeData(Seurat, normalization.method = "LogNormalize", scale.factor = 10000,verbose = FALSE)
Seurat<-FindVariableFeatures(Seurat,selection.method = "vst",nfeatures=100,verbose = FALSE)
####选择所有PA/gene进行归一化
allgenes <- rownames(Seurat)
Seurat<- ScaleData(Seurat, features = allgenes,verbose = FALSE)
#####获取操作对象
Idents(Seurat)<-group.by
if(!is.null(cluster.1)){
APAmarkers <- FindMarkers( Seurat, only.pos = only.pos, min.pct = 0.25,logfc.threshold = 0.25,ident.1=cluster.1,features = genes, test.use = method)
if(!is.null(cluster.2)){
APAmarkers <- FindMarkers( Seurat, only.pos = only.pos, min.pct = 0.25,logfc.threshold = 0.25,
ident.1=cluster.1, ident.2=cluster.2,features = genes, test.use = method)
}
if(order=="down"){
APAmarkers<- APAmarkers[order(APAmarkers$avg_log2FC,decreasing = T),]
}else{
APAmarkers<- APAmarkers[order(APAmarkers$avg_log2FC,decreasing = F),]
}
}
if(every.cluster==TRUE){
APAmarkers <- FindAllMarkers(Seurat, only.pos = only.pos, min.pct = 0.25, logfc.threshold = 0.25,features = genes,test.use =method)
if(order=="down"){
APAmarkers<- APAmarkers[order(APAmarkers$cluster,-APAmarkers$avg_log2FC),]
}else{
APAmarkers<- APAmarkers[order(APAmarkers$cluster,APAmarkers$avg_log2FC),]
}
}
return(APAmarkers)
}
##############################vizAPAMarker(test)
# -------------- *** vizAPAMarker() **** ---------------
#' Visualize APA markers in individual cell types.
#'
#' Draws a violin point/heatmap/bubble  plot to show APA markers
#'
#' @usage vizAPAMarkers(APAindex,celltype.anno,group.by,markers=NULL,type="heatmap",vln.flip=TRUE,vln.fill.by="celltype",vln.cols=NULL,dot.cols=c("lightgrey", "#9b393b"),hm.group.cols=NULL)
#' @param APAindex A data frame with rownames denoting genes, columns are samples, and values are the APA index values. Also includes other method-specific columns
#' @param celltype.anno A data frame denoting the cell classification information. Each row is one cell, and the column is the sample group
#' Row names in the celltype.anno need to match the column names of  APA index.
#' @param group.by Factor to group the cells by(the column name containing cell classification information, stored in celltype.anno)
#' @param markers APA markers to plot
#' @param type violin/heatmap/dot:specified drawing type.When type=violin/heatmap/dot,show APA markers in the form of violin plot/heatmap/bubble plot
#' @param vln.flip flip plot orientation.If type=violin and vln.flip=TRUE,cell classes on the x-axis
#' @param vln.fill.by celltype/markers:If type=violin,color violins based on either 'celltype' or 'markers'
#' @param vln.cols If type=violin,colors to use for plotting
#' @param dot.cols If type=dot,colors to use for plotting:the two colors to form the gradient over
#' @param hm.group.cols If type=heatmap,colors to use for the color bar:add a color bar showing group status for cells
#' @return vizAPAMarkers() reutrns violin plot/heatmap/bubble plot
#' @examples
#' #specified drawing type
#' topAPAM<-APAmarkers %>% group_by(cluster) %>% top_n(n =2, wt = avg_log2FC)
#' vizAPAMarkers(APAindex,celltype.anno=scPACds@colData ,group.by="celltype",type="heatmap",markers=topAPAM$gene)
#' #If type=violin,color violins based on 'celltype'
#' vizAPAMarkers(APAindex,celltype.anno=scPACds@colData ,group.by="celltype",type="violin",markers=topAPAM$gene)
#' #If type=violin,color violins based on 'markers'
#' vizAPAMarkers(APAindex,celltype.anno=scPACds@colData ,group.by="celltype",type="violin",markers=topAPAM$gene,vln.fill.by="markers")
#' @name vizAPAMarkers
#' @export
vizAPAMarkers<-function(APAindex,celltype.anno,group.by,markers=NULL,type="heatmap",
vln.flip=TRUE,vln.fill.by="celltype",vln.cols=NULL,dot.cols=c("lightgrey", "#9b393b"),hm.group.cols=NULL){
Seurat<-CreateSeuratObject(APAindex,meta.data =scPACds@colData,assay = "APA")
####标准化
Seurat <- NormalizeData(Seurat, normalization.method = "LogNormalize", scale.factor = 10000,verbose = FALSE)
Seurat<-FindVariableFeatures(Seurat,selection.method = "vst",nfeatures=100,verbose = FALSE)
####选择所有PA/gene进行归一化
allgenes <- rownames(Seurat)
Seurat<- ScaleData(Seurat, features = allgenes,verbose = FALSE)
#####获取操作对象
Idents(Seurat)<-group.by
palette <-c("#FF6347","#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887",
"#DC143C","#0000FF","#20B2AA","#FFA500","#9370DB","#98FB98",
"#F08080","#1E90FF","#7CFC00","#FFFF00","#808000","#FF00FF","#FA8072",
"#7B68EE","#9400D3","#800080","#A0522D",
"#D2B48C","#D2691E","#87CEEB","#40E0D0","#5F9EA0")
if(type=="violin"){
if(vln.fill.by=="celltype"){
vln.fill.by<-"ident"
}else{
vln.fill.by<-"feature"
}
if(is.null(vln.cols)){
if(vln.flip==TRUE){
p<- VlnPlot(Seurat,features=markers,pt.size=0,stack=TRUE,fill.by = vln.fill.by,
flip=TRUE,cols=palette
)+
theme(axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none"
)
}else{
p<- VlnPlot(Seurat,features=markers,pt.size=0,stack=TRUE,log=TRUE,fill.by = vln.fill.by,
cols=palette
)+
theme(axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none"
)
}
}
if(!is.null(vln.cols)){
if(vln.flip==TRUE){
p<- VlnPlot(Seurat,features=markers,pt.size=0,stack=TRUE,fill.by = vln.fill.by,
flip=TRUE,cols=vln.cols
)+
theme(axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none"
)
}else{
p<-VlnPlot(Seurat,features=markers,pt.size=0,stack=TRUE,log=TRUE,fill.by = vln.fill.by,
cols=vln.cols
)+
theme(axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none"
)
}
}
}
if(type=="heatmap"){
p<-DoHeatmap(Seurat,features =markers ,label = TRUE, disp.min=0,disp.max=1,group.colors=palette)
if(!is.null(hm.group.cols)){
p<-DoHeatmap(Seurat,features =markers ,label = TRUE, disp.min=0,disp.max=1,group.colors=hm.group.cols)
}
}
if(type=="dot"){
p<-DotPlot(Seurat,features = markers,col.min=0,col.max=1,col=dot.cols)+
theme(panel.grid.major = element_blank(), #主网格线
panel.grid.minor = element_blank(), #次网格线
panel.border = element_blank(), #边框
axis.title = element_blank(),  #轴标题
panel.background = element_rect(fill = 'white'), #背景色
plot.background=element_rect(fill="white"))+
coord_flip()
}
return(p)
}
# -------------- *** subsetPACds() **** ---------------
#' Subset a PACdataset
#'
#' subsetPACds returns a subset of PACdataset.
#'
#' @param group a sample group, must be present in PACds@colData.
#' If NULL, then parameters of cond1, cond2, and avg are not in use.
#' @param cond1 a condition, must be present in PACds@colData.
#' @param cond2 a condition, must be present in PACds@colData.
#' If cond1 or cond2 is NULL, then both cond1 and cond2 are set NULL.
#' @param conds to subset multiple conditions.
#' @param avgPACtag if >0, then filter PACs with average PAT number across all samples >= avgPACtag, after subseting by group and conds.
#' @param avgGeneTag similar to avgPACtag, but for gene.
#' @param totPACtag filter PACs with total PAT number of all samples >=totPACtag.
#' @param noIntergenic whether to remove intergenic PACs.
#' @param avg TRUR/FALSE. If TRUE then take average of replicates of each of subset conditions.
#' @param pool TRUR/FALSE. If TRUE then take pool value of replicates of each of subset conditions.
#' @param choosePA value can e NULL/distal/proximal/APA. Only if PACds is all 3UTRAPA, then choosePA can be distal/proximal.
#'  APA means choose PACs from APA genes.
#' @param PAs to filter PACs by a PAC name list according to rownames in PAs.
#' @param genes to filter by a gene name list according to PACds@anno$gene.
#' @param chrs to filter by a chr name list according to PACds@anno$chr.
#' @param clearPAT If >0 then set @counts[<clearPAT]=0 and remove blank lines and reset PACds@anno.
#' @return a subset of PACdataset with 0-count lines removed.
#' @examples
#' data(scPACds)
#' PACds1=subsetPACds(scPACds, group='group', pool=TRUE)
#' ## Subset two conditions.
#' pacds=subsetPACds(scPACds, group='group',cond1='anther', cond2='embryo')
#' ## Subset PACs from APA genes in two conditions.
#' PACds1=subsetPACds(scPACds, group='group', cond1='anther', cond2='embryo', choosePA='apa')
#' ## Subset PACs of given genes.
#' subsetPACds(scPACds, genes=scPACds@anno$gene[1:5], verbose=TRUE)
#' ## Subset PACs of given PA names.
#' swPAC=subsetPACds(scPACds, PAs=rownames(scPACds@counts)[1:5], verbose=TRUE)
#' @name subsetPACds
#' @family PACdataset functions
#' @seealso [samplePACds()] to get sampled PACds.
#' @export
subsetPACds<-function(pacds,
group=NULL, cond1=NULL, cond2=NULL, conds=NULL,
avgPACtag=0, avgGeneTag=0, totPACtag=0,
choosePA=NULL, PAs=NULL, genes=NULL, chrs=NULL,
noIntergenic=FALSE, avg=FALSE, pool=FALSE,
clearPAT=0,
verbose=FALSE) {
if (avg & pool) stop('avg or pool')
n1=nrow(pacds@counts)
txt=c('before subsetPACds'=n1)
if (is.null(group)) {
cond1=NULL; cond2=NULL; avg=FALSE; conds=NULL
if(avg | pool) stop("group is NULL but avg or pool is true, don't know how to summarize")
}
if (!is.null(choosePA)) {
choosePA=tolower(choosePA)
if (!(choosePA %in% c('distal','proximal','apa'))) {
stop("choosePA must be distal/proximal/APA")
}
}
if (noIntergenic) {
ii=getNonItgFtrId(pacds@anno$ftr)
pacds=pacds[ii]
txt=c(txt,'noItg'=nrow(pacds@counts))
}
if (is.null(conds)) {
if (!is.null(group) & (is.null(cond1) | is.null(cond2))) {
conds=levels(pacds@colData[,group])
} else if (!is.null(group)) {
conds=c(cond1, cond2)
}
}
if (length(conds)>0) {
if (!AinB(conds, pacds@colData[,group]) ) {
stop(cat(paste(conds[1], collapse = ','),'not all in pacds@colData\n'))
}
smps=rownames(pacds@colData)[which(pacds@colData[,group] %in% conds)]
pacds@counts=pacds@counts[,smps,drop=F]
pacds@colData=pacds@colData[smps,,drop=F]
for (i in 1:ncol(pacds@colData)) {
if (is.factor(pacds@colData[,i])) pacds@colData[,i]=droplevels(pacds@colData[,i])
}
row0=which(rowSums(pacds@counts)==0)
if (length(row0)>0) {
pacds=pacds[-row0]
}
txt=c(txt,'After filter conds'=nrow(pacds@counts))
}
if (avgPACtag>0) {
pacds=pacds[rowMeans(pacds@counts)>=avgPACtag]
n2=nrow(pacds@counts)
txt=c(txt,nrow(pacds@counts))
names(txt)[length(txt)]=paste0('avgPACtag>=',avgPACtag)
}
if (totPACtag>0) {
tot=rowSums(pacds@counts)
pacds=pacds[tot>=totPACtag]
txt=c(txt,nrow(pacds@counts))
names(txt)[length(txt)]=paste0('totPACtag>=',totPACtag)
}
if (avgGeneTag>0) {
pacds@anno=pacds@anno[rownames(pacds@counts),,drop=F]
rs=rowSums(pacds@counts)
b=aggregate(rs, list(gene=pacds@anno$gene), sum)
gs=b$gene[b$x/ncol(pacds@counts)>=avgGeneTag]
pacds=pacds[pacds@anno$gene %in% gs]
txt=c(txt,nrow(pacds@counts))
names(txt)[length(txt)]=paste0('avgGeneTag>=',avgGeneTag)
}
if (!is.null(PAs)) {
rn=rownames(pacds@counts)
pacds=pacds[rn[rn %in% PAs]]
txt=c(txt,nrow(pacds@counts))
names(txt)[length(txt)]='PAs'
}
if (!is.null(genes)) {
gcol=NA
if ('gene_id' %in% colnames(pacds@anno)) gcol='gene_id'
if ('gene' %in% colnames(pacds@anno)) gcol='gene'
if (is.na(gcol)) stop("subsetPACds by gene, but gene_id or gene not in pacds@anno\n")
pacds=pacds[pacds@anno[, gcol] %in% genes]
txt=c(txt,nrow(pacds@counts))
names(txt)[length(txt)]='genes'
}
if (!is.null(chrs)) {
pacds=pacds[pacds@anno$chr %in% chrs]
txt=c(txt,nrow(pacds@counts))
names(txt)[length(txt)]='chrs'
}
if (avg | pool) {
if (avg) txt=c(txt,"averaging")
if (pool) txt=c(txt,"pool")
d=matrix()
conds=unique(pacds@colData[,group])
for (cond in conds) {
if (avg) {
di=rowMeans(pacds@counts[,rownames(pacds@colData)[which(pacds@colData[,group]==cond)], drop=F])
} else {
di=rowSums(pacds@counts[,rownames(pacds@colData)[which(pacds@colData[,group]==cond)], drop=F])
}
if (conds[1]==cond) {
d=di
} else {
d=cbind(d,di)
}
}
colnames(d)=conds
rownames(d)=rownames(pacds@counts)
pacds@counts=as.data.frame(d)
pacds@colData=data.frame(group=conds)
colnames(pacds@colData)=group
rownames(pacds@colData)=conds
pacds@counts=round(pacds@counts)
for (i in 1:ncol(pacds@colData)) {
pacds@colData[,i]=factor(pacds@colData[,i])
}
}
#Note the filtering order!
#If avg/pool=T, then do that first and then clearPAT
#if a line is all 0, then remove the PAC.
if (!is.null(clearPAT)) {
if (clearPAT>0) {
pacds@counts[pacds@counts<clearPAT]=0
idx=rowSums(pacds@counts)!=0
pacds=pacds[idx]
txt=c(txt,'After clearPAT'=nrow(pacds@counts))
}
}
idx=rowSums(pacds@counts)!=0
if (sum(idx)!=length(pacds)) {
pacds=pacds[idx]
txt=c(txt,'After removing 0 lines'=nrow(pacds@counts))
}
#After clearPAT, then choosePA, because clearPAT will remove all-0 lines.
if (!is.null(choosePA)) {
if (choosePA %in% c('distal','proximal')) {
pacds=get3UTRAPAds(pacds, sortPA=TRUE, choose2PA='PD')
if (choosePA=='distal') {
pacds=pacds[seq(2,nrow(pacds@counts),2)]
} else {
pacds=pacds[seq(1,nrow(pacds@counts),2)]
}
} else if (choosePA=='apa') {
genes1=unique(pacds@anno$gene[duplicated(pacds@anno$gene)])
pacds=pacds[pacds@anno$gene %in% genes1]
}
txt=c(txt,nrow(pacds@counts))
names(txt)[length(txt)]=choosePA
}
if (verbose) {
txt=cbind(txt)
print(txt)
}
return(pacds)
}
# Given the ftr vectorget id that are not ^inter
# - ftr: character vector
# - return: idx of non-itg ftrs
getNonItgFtrId<-function(ftr) {
id=grep('^inter',ftr)
if (length(id)>0) {
return((1:length(ftr))[-id])
} else {
return(1:length(ftr))
}
}
devtools::document()
library(roxygen2)
devtools::document()
